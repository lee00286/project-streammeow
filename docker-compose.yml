version: "3"
services:
  frontend:
    container_name: frontend
    build: "./frontend"
    ports:
      - "3000:3000"
    depends_on:
      - node
      - webrtc
    links:
      - node
      - webrtc
  db:
    image: postgres:15-alpine
    restart: always
    volumes:
      - ./init/postgres/pg_hba.conf:/var/lib/postgresql/data/pg_hba.conf
      - ./init/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./data/postgres:/var/lib/postgresql/data
    environment:
      - PGUSER=${PGUSER}
      - PGDATA=${PGDATA}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5435:5432"
    healthcheck:
      # test: pg_isready -U postgres
      test: ["CMD", "pg_isready", "-q"]
  node:
    container_name: node
    build: "./backend/node"
    depends_on:
      - db
    links:
      - db
    ports:
      - "5001:5001"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USERNAME=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
  webrtc:
    container_name: webrtc
    build: "./backend/webrtc"
    ports:
      - "8080:8080"
  nginx:
    image: nginx:latest
    container_name: nginx
    # build: ./nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - frontend
      - node
      - webrtc
volumes:
  dbdata:
